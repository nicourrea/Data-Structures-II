Reading the input is like following a line of people one by one, so it's O(N), where "N" is the total number of characters. Storing these people in a map (a bit like organizing them in a list) has a complexity of O(log N) because each insertion involves a search in a balanced structure. When you consider reading and storing together, it becomes O(N * log N) because you do this repeatedly. For finding and printing the "Top Ten" most frequent items, the process is more complex, with nested loops (one inside another), leading to an O(N^2) complexity. This happens because you go through the list multiple times to compare and find the most frequent items. The nested loop is what makes this part a bit slower than the rest.